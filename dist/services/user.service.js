"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateUser = exports.loginUser = exports.getUser = exports.resetPassword = exports.getMedicals = exports.getClients = exports.createUser = void 0;
const express_validator_1 = require("express-validator");
const user_1 = __importDefault(require("../schema/user"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const statictoken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZHV0ZW50ZSI6IjQ1IiwiaWRhcHBsaWNhemlvbmUiOiIyIiwiaWRjb250ZXN0byI6IjAiLCJub21lIjoiRU1PQklMRTI0IiwiY29nbm9tZSI6IkVNT0JJTEUyNCIsIm5iZiI6MTY3OTA1OTQ1NiwiZXhwIjoxNzEwNTk1NDU2LCJpYXQiOjE2NzkwNTk0NTZ9.wsdwUoTivWI3tyK5diDI63_IFXOQ5wEnlww_9DTDYLM';
function createUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let randPassword = [...Array(8)].map(_ => c[~~(Math.random() * c.length)]).join('');
        let encryptedrandPassword = bcrypt_1.default.hashSync(randPassword.toString(), 10);
        const body = req.body;
        const addingDealer = new user_1.default({
            password: encryptedrandPassword,
            ...body
        });
        addingDealer.markModified("users");
        addingDealer.save();
        if (addingDealer) {
            return res
                .status(202)
                .json({ message: "User registered", user: addingDealer, password: randPassword });
        }
        else
            return res.status(204).json({ message: "User not registered" });
    }
    catch (errors) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.createUser = createUser;
function getClients(req, res) {
    try {
        const body = req.body;
        user_1.default.find({ type: 0, from_id: body.id }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Clients don't found" });
            return res.status(202).json({ message: "Clients found", clients: doc });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getClients = getClients;
function getMedicals(req, res) {
    try {
        const body = req.body;
        user_1.default.find({ type: 2, from_id: body.id }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Medicals don't found" });
            return res.status(202).json({ message: "Medicals found", medical: doc });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getMedicals = getMedicals;
function resetPassword(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const { _id } = req.body;
        const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let randPassword = [...Array(8)].map(_ => c[~~(Math.random() * c.length)]).join('');
        let encryptedrandPassword = bcrypt_1.default.hashSync(randPassword.toString(), 10);
        user_1.default.findOneAndUpdate({ _id }, { password: encryptedrandPassword }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "invalid body or error" });
            return res.status(202).json({ message: "Password Updated", password: randPassword });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.resetPassword = resetPassword;
function getUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        user_1.default.findOne({ _id: req._id }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Dealer don't found" });
            return res.status(202).json({ message: "Dealer found", user: doc, external_token: statictoken });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getUser = getUser;
async function loginUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const body = req.body;
        const account = await user_1.default.findOne({ email: body.email });
        if (account) {
            if (bcrypt_1.default.compareSync(body.password.toString(), account.password.toString())) {
                const token = jsonwebtoken_1.default.sign({ _id: account._id.toString() }, "SECRET_EXAMPLE_KEY", {
                    expiresIn: '2 days',
                });
                return res.status(202).json({ message: "Account loggin", user: account, token, external_token: statictoken });
            }
            else
                return res.status(404).json({ message: "Invalid password" });
        }
        else
            return res.status(404).json({ message: "Account not found", account });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.loginUser = loginUser;
function updateUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        user_1.default.findOneAndUpdate({ _id: req.body?.id }, { ...req.body }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "invalid Account" });
            return res.status(202).json({ message: "Updated", user: doc });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "invalid body" });
    }
}
exports.updateUser = updateUser;
//# sourceMappingURL=data:application/json;base64,