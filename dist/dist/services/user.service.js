"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updatePassword = exports.updateUser = exports.getUser = exports.loginUser = exports.registerUser = void 0;
const express_validator_1 = require("express-validator");
const user_schema_1 = __importDefault(require("../schema/user.schema"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
async function registerUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const body = req.body;
        const addingUser = new user_schema_1.default({
            name: body.name,
            lastname: body.lastname,
            password: bcryptjs_1.default.hashSync(body.password.toString(), 10),
            email: body.email,
            date_birth: new Date(body.date_birth),
            phone: body.phone,
            type: body.type,
            country: body.country,
            province: body.province,
            gender: body.gender
        });
        addingUser.markModified('users');
        addingUser.save();
        if (addingUser) {
            return res.status(202).json({ message: "User registered", user: addingUser });
        }
        else
            return res.status(204).json({ message: "User not registered" });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.registerUser = registerUser;
async function loginUser(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const body = req.body;
        const account = await user_schema_1.default.findOne({ email: body.email });
        if (account) {
            if (bcryptjs_1.default.compareSync(body.password.toString(), account.password.toString())) {
                const token = jsonwebtoken_1.default.sign({ _id: account._id?.toString(), name: account.name }, "SECRET_EXAMPLE_KEY", {
                    expiresIn: '2 days',
                });
                return res.status(202).json({ message: "Account loggin", user: account, token });
            }
            else
                return res.status(404).json({ message: "Invalid password" });
        }
        else
            return res.status(404).json({ message: "Account not found" });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.loginUser = loginUser;
async function getUser(req, res) {
    try {
        const token = req.cookies.access_token;
        const { _id } = jsonwebtoken_1.default.verify(token, "SECRET_EXAMPLE_KEY");
        const account = await user_schema_1.default.findOne({ _id });
        if (account) {
            return res.status(202).json({ message: "User data", user: account });
        }
        else
            return res.status(404).json({ message: "Invalid account" });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getUser = getUser;
async function updateUser(req, res) {
    try {
        const token = req.cookies.access_token;
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const { _id } = jsonwebtoken_1.default.verify(token, "SECRET_EXAMPLE_KEY");
        const body = req.body;
        user_schema_1.default.findOneAndUpdate({ _id }, body, { upsert: true }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Invalid account" });
            return res.status(202).json({ message: "Account updated" });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.updateUser = updateUser;
async function updatePassword(req, res) {
    try {
        const token = req.cookies.access_token;
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const { _id } = jsonwebtoken_1.default.verify(token, "SECRET_EXAMPLE_KEY");
        const { password, oldpassword } = req.body;
        const account = await user_schema_1.default.findOne({ _id });
        if (account) {
            if (bcryptjs_1.default.compareSync(oldpassword.toString(), account.password.toString())) {
                user_schema_1.default.findOneAndUpdate({ _id }, { password: bcryptjs_1.default.hashSync(password.toString(), 10) }, { upsert: true }, function (err, doc) {
                    if (err)
                        return res.status(404).json({ message: "Invalid account" });
                    return res.status(202).json({ message: "Password updated" });
                });
            }
            else
                return res.status(404).json({ message: "Invalid password" });
        }
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.updatePassword = updatePassword;
//# sourceMappingURL=data:application/json;base64,