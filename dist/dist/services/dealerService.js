"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upDateDealer = exports.loginDealer = exports.getDealer = exports.getDealer1 = exports.createDealer = void 0;
const express_validator_1 = require("express-validator");
const dealerSchema_1 = __importDefault(require("../schema/dealerSchema"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
function createDealer(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let randPassword = [...Array(8)].map(_ => c[~~(Math.random() * c.length)]).join('');
        let encryptedrandPassword = bcrypt_1.default.hashSync(randPassword.toString(), 10);
        const body = req.body;
        const addingDealer = new dealerSchema_1.default({
            tipologia: body.tipologia,
            ragioneSociale: body.ragioneSociale,
            tipoAzienda: body.tipoAzienda,
            email: body.email,
            password: encryptedrandPassword,
            username: body.username,
            indirizzo: body.indirizzo,
            comune: body.comune,
            provincia: body.provincia,
            cap: body.cap,
            pIva: body.pIva,
            cFiscale: body.cFiscale,
            sdi: body.sdi,
            pec: body.pec,
            referente: body.referente,
            telefono: body.telefono,
            emailRef: body.emailRef,
            ruole: body.ruole,
            dominio: body.dominio,
            credito: body.credito,
            sim: body.sim
        });
        addingDealer.markModified("dealers");
        addingDealer.save();
        if (addingDealer) {
            return res
                .status(202)
                .json({ message: "Dealer/Master Dealer registered", user: addingDealer, password: randPassword });
        }
        else
            return res.status(204).json({ message: "Dealer/Master Dealer not registered" });
    }
    catch (errors) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.createDealer = createDealer;
function getDealer1(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const { cFiscale } = req.body;
        dealerSchema_1.default.findOne({ cFiscale }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Dealer don't found" });
            console.log(res.status);
            return res.status(202).json({ message: "Dealer found", dealers: doc });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getDealer1 = getDealer1;
function getDealer(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        dealerSchema_1.default.findOne({ _id: req._id }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "Dealer don't found" });
            return res.status(202).json({ message: "Dealer found", dealers: doc });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.getDealer = getDealer;
async function loginDealer(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const body = req.body;
        const account = await dealerSchema_1.default.findOne({ email: body.email });
        if (account) {
            if (bcrypt_1.default.compareSync(body.password.toString(), account.password.toString())) {
                const token = jsonwebtoken_1.default.sign({ _id: account._id?.toString() }, "SECRET_EXAMPLE_KEY", {
                    expiresIn: '2 days',
                });
                return res.status(202).json({ message: "Account loggin", user: account, token });
            }
            else
                return res.status(404).json({ message: "Invalid password" });
        }
        else
            return res.status(404).json({ message: "Account not found" });
    }
    catch (error) {
        return res.status(505).json({ message: "Invalid body or error" });
    }
}
exports.loginDealer = loginDealer;
function upDateDealer(req, res) {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const { cFiscale } = req.body;
        dealerSchema_1.default.findOneAndUpdate({ cFiscale }, function (err, doc) {
            if (err)
                return res.status(404).json({ message: "invalid Account" });
            return res.status(202).json({ message: "invalid body or error" });
        });
    }
    catch (error) {
        return res.status(505).json({ message: "invalid body" });
    }
}
exports.upDateDealer = upDateDealer;
//# sourceMappingURL=data:application/json;base64,